.TH DGSH-PARALLEL 1 "15 December 2016"
.\"
.\" (C) Copyright 2016 Diomidis Spinellis.  All rights reserved.
.\"
.\"  Licensed under the Apache License, Version 2.0 (the "License");
.\"  you may not use this file except in compliance with the License.
.\"  You may obtain a copy of the License at
.\"
.\"      http://www.apache.org/licenses/LICENSE-2.0
.\"
.\"  Unless required by applicable law or agreed to in writing, software
.\"  distributed under the License is distributed on an "AS IS" BASIS,
.\"  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
.\"  See the License for the specific language governing permissions and
.\"  limitations under the License.
.\"
.SH NAME
dgsh-parallel \- Create a semi-homogeneous dgsh parallel processing block
.SH SYNOPSIS
\fBdgsh-parallel\fP
[\fB\-d\fP]
\fB\-f\fP \fIfile\fP |
\fB\-l\fP \fIlist\fP |
\fB\-n\fP \fIn\fP
\fIcommand ...\fP
.SH DESCRIPTION
\fIdgsh-parallel\fP creates and executes a \fIdgsh\fP block
that invokes multiple times the specified command and its optional arguments.
If the command or its options include the \fI{}\fP string,
this is replaced by the numeric or string identifier associated with
each invocation.
.SH OPTIONS
.IP "\fB\-d\fP
Allows the debugging of the generated script, by leaving it in the
temporary directory and echoing its path on the standard error.
.IP "\fB\-f\fP \fIfile\fP"
Obtain string arguments from the specified file: one argument per line.
One command will be generated for each line in the file.
Each command will have \fI{}\fP strings replaced with the contents of
the corresponding line.
.IP "\fB\-l\fP \fIlist\fP"
Obtain string arguments from the specified comma-separated list.
One command will be generated for each list element.
Each command will have \fI{}\fP strings replaced with the corresponding
element.
.IP "\fB\-n\fP \fIn\fP"
Run \fIn\fP instances of the command.
Each command will have \fI{}\fP strings replaced with the command's
ordinal number, starting from 1.
.SH EXAMPLES
.PP
Count in parallel the number of times each word appears in the specified
input file(s).
This sequence mirrors Hadoop's WordCount example.
.ft C
.nf
# Scatter input
dgsh-tee -s |
# Run four instances of the command
# Emulate Java's default StringTokenizer, sort, count
dgsh-parallel -n 4 "tr -s ' \\t\\n\\r\\f' '\\n' | sort | uniq -c" |
# Merge the four sorted counts
dgsh-merge-sum '<|' '<|' '<|'
.ft P
.fi
.SH "SEE ALSO"
\fIdgsh\fP(1),
\fIdgsh-tee\fP(1),
.SH BUGS
The interface between the generated script and its invokers is currently
(December 2016) being polished.
.SH AUTHOR
Diomidis Spinellis \(em <http://www.spinellis.gr>.
